#!/usr/bin/env bash

############################################################
usage() {
cat << EOF

사용법: bash $0 SOURCE TARGET TASK_NAME COMMAND

버전: 2020.08.28.03

rclone과 gclone이 설치되어 있어야 합니다.

rclone download : https://rclone.org/downloads
gclone download : https://github.com/wiserain/gclone/releases

rclone.conf와 gclone.conf의 섹션 이름과 root_folder_id는 서로 동일해야 합니다.
아래는 예시입니다.
---------------------------------------------------
| rclone.conf            | gclone.conf            |
| -----------------------|----------------------- |
| [source]               | [source]               |
| root_folder_id = 12345 | root_folder_id = 12345 |
| -----------------------|----------------------- |
| [target]               | [target]               |
| root_folder_id = 67890 | root_folder_id = 67890 |
---------------------------------------------------

gclone의 폴더 ID 형식은 사용이 불가능합니다.
gclone의 size, lsf 정보가 부정확합니다.
gclone은 copy, miss-copy, dedupe 에만 사용됩니다.

동일한 작업은 이전 작업 이름으로 설정해야 작업 시간을 절약할 수 있습니다.

SOURCE    필수
          source:folder
          source: SOURCE 섹션 이름, 필수
          folder  하위 폴더 이름, 선택
                  

TARGET    필수
          target:folder
          target: TARGET 섹션 이름, 필수
          folder  하위 폴더 이름, 선택

TASK_NAME 작업 이름, 필수

COMMAND   명령, 필수
          * 스크립트 기능

          all         * 전체 실행
                        아래 순서대로 실행됩니다.

          copy          복사
                        기본 옵션  --drive-server-side-across-configs
                        활용 옵션  --exclude-from target-lsf.log

          dedupe        TARGET dedupe newest
                        기본 옵션  --drive-use-trash=false
                        활용 옵션  target-deup-dir.log

          lsf           파일 목록
                        SOURCE     결과 파일이 존재할 경우 30분 후 실행
                        TARGET     SOURCE 파일 목록과 같지 않을 경우 실행
                        자동 실행  lsf-count, dupe, dupe-dir

          lsf-count   * 파일 목록 개수
                        자동 실행  dupe, dupe-dir

          dupe        * 중복 파일 목록
                        자동 실행  dupe-dir

          dupe-dir    * 중복 파일의 상위 폴더 목록

          old         * SOURCE에는 없고 TARGET에만 있는 파일 목록

          old-delete  * TARGET의 old 파일 목록 삭제
                        기본 옵션  --drive-use-trash=false

          miss        * SOURCE에는 있고 TARGET에는 없는 파일 목록

          miss-copy   * TARGET의 miss 파일 목록 복사
                        기본 옵션  --drive-server-side-across-configs

          rmdirs      * TARGET의 빈 폴더 삭제
                        기본 옵션  --drive-use-trash=false
                        all 명령에서는 제외 

          rsize         파일 개수, 크기
                        rclone size

          gsize         rsize 비교 분석용
                        gclone size
                        all 명령에서는 제외 

로그
     폴더   $basedir/TASK_NAME

     결과   [SOURCE|TARGET]-COMMAND.log
     개수   count-all.log
     크기   count-size.log
     작업   task.log
     clone  clone.log

EOF

}

############################################################
# set basedir
############################################################
oIFS=$IFS;
basedir="`pwd`/$0-task"

############################################################
# script commands
############################################################
source=$1
target=$2
tname=$3
command=$4
if [[ $# != 4 ]] || [[ "$source" != *":"* ]] || [[ "$target" != *":"* ]] ; then
	usage; exit 1
fi
case $command in
	all|lsf|lsf-count|dupe|dupe-dir|copy|dedupe|old|old-delete|miss|miss-copy|rmdirs|rsize|gsize);;
	*) usage; exit 1;;
esac

############################################################
# common functions
############################################################
timestamp(){
	echo `date "+%Y/%m/%d %H:%M:%S"`
}

runtime() {
	# $1: end time
	# $2: start time
	local diff=$((($2-$1)))
	local s=$(($diff%60))
	if [[ "$s" == "-"* ]]; then
		echo "0h 0m 0s"
	else
		echo "$(($diff/3600))h $((($diff/60)%60))m ${s}s"
	fi
}

echo_color() {
	# $1: color name
	# $2: string
	# $n: color number
	case $1 in
		r) n=31;; # red
		g) n=32;; # green
		y) n=33;; # yellow
		b) n=34;; # blue
		*) n=39;; # white
	esac
	if [[ ! -f /.dockerenv ]]; then
		echo -e "\e[0;${n}m${2}\e[0m"
	else
		echo -e "$2"
	fi
}

log_msg=""
log_fmt() {
	local color=$1
	local type=$2
	log_msg="`timestamp` `printf "%-5s" "$type"` : $3"
	echo_color $color "$log_msg"
	echo -e "$log_msg" >> "$tlog"
	if [[ $type == COUNT ]]; then
		sed -i "1i$log_msg" "$calog"
	fi
	if [[ $type == ERROR ]]; then
		echo; exit 1
	fi
}

make_dir() {
	if [[ ! -d $1 ]]; then
		mkdir -p "$1"
	fi
}

check_path() {
	local path=$1 file=`printf "%-11s" "$2"`
	IFS=';'
	for item in $path; do
		if [[ -f $item ]]; then
			eval $3="$item"
			log_fmt w INFO "path | $file | $item"
			return 0
		fi
	done
	IFS=$oIFS
	log_fmt r ERROR "path | $file | Not found"
}

############################################################
# get path
############################################################
get_path() {
	local file path
	########################################################
	file="rclone"; unset path
	########################################################
	if [[ ! -f /.dockerenv ]]; then
		path+="/usr/bi n/$file;"
		path+="/usr/bin/$file;"
	else
		case `uname` in
			Linux)
				case `uname -m` in
					x86_64|i686|386)
						path+="/app/bin/$file;";;
					aarch64|arm)
						path+="/app/bin/LinuxArm/$file;";;
				esac	
				;;
			Darwin)
				path+="/app/bin/Darwin/$file;";;
		esac
	fi
	check_path "$path" "$file" "rclone"
	########################################################
	file="rclone.conf"; unset path
	########################################################
	if [[ ! -f /.dockerenv ]]; then
		path+="$HOME/$file;"
		path+="$HOME/.config/$file;"
		path+="$HOME/.config/rclone/$file;"
		path+="$HOME/.config/gclone/$file;"
	else
		path+="/app/data/db/$file;"
	fi
	check_path "$path" "$file" "rconf"
	########################################################
	file="gclone"; unset path
	########################################################
	if [[ ! -f /.dockerenv ]]; then
		path+="/usr/bin/$file;"
		path+="/opt/sjva/custom/rclone_expand/bin/$file;"
	else
		path+="/app/data/custom/rclone_expand/bin/$file;"
	fi
	check_path "$path" "$file" "gclone"
	########################################################
	file="gclone.conf"; unset path
	########################################################
	if [[ ! -f /.dockerenv ]]; then
		path+="$HOME/$file;"
		path+="$HOME/.config/$file;"
		path+="$HOME/.config/gclone/$file;"
		path+="$HOME/.config/rclone/$file;"
		path+="/opt/sjva/custom/rclone_expand/$file;"
	else
		path+="/app/data/rclone_expand/$file;"
	fi
	check_path "$path" "$file" "gconf"
	########################################################
}

check_file() {
	case $# in
		1)
			if [[ -f $1 ]] && [[ `sed 's/^$//g' "$1" | wc -l` != 0 ]]; then
				echo 0
				return 0
			else
				echo 1
				return 1
			fi
		;;
		2)
			if [[ -f $1 ]] && [[ `sed 's/^$//g' "$1" | wc -l` != 0 ]] && [[ -f $2 ]] && [[ `sed 's/^$//g' "$2" | wc -l` != 0 ]]; then
				echo 0
				return 0
			else
				echo 1
				return 1
			fi
		;;
	esac
}

time_diff() {
	local diff=$(($(date -d "$2" +%s)-$(date -d "$1" +%s)))
	local sign d h m s
	if [[ $diff -lt 0 ]]
	then sign="-"; diff=${diff/^-/}
	else sign="+"
	fi
	s=$(($diff%60))
	diff=$(($diff/60))
	m=$(($diff%60))
	diff=$((diff/60))
	h=$(($diff%24))
	d=$(($diff/24))
	# printf "$sign%d %.2d:%.2d:%.2d\n" $d $h $m $s
	echo $m
}

############################################################
# clone
############################################################
clone() {
	# $1: path
	# $2: task
	# $3: log on/off
	
	local logon=$3
	
	if [[ -z $pmax ]]; then
		pmax=$((${#source}>${#target}?${#source}:${#target}))
	fi
	local path="$1" path_ori path_str
	case $path in
	source)
		path_ori="$source"
		path_str="source | `printf "%-${pmax}s" $path_ori`"
	;;
	target)
		path_ori="$target"
		path_str="target | `printf "%-${pmax}s" $path_ori`"
	;;
	server)
		path_str="source | `printf "%-${pmax}s" $source` | target | `printf "%-${pmax}s" $target`"
	;;
	esac
	
	local task="$2"
	
	local limit=5
	rm -f "$clog"
	local opt_cm="--disable ListR --fast-list --tpslimit $limit --tpslimit-burst $limit --log-level INFO --log-file="$clog""
	local opt_cp="--ignore-existing --no-traverse --progress --size-only --stats 1s --transfers $limit $opt_cm"
	local opt_sv="--drive-server-side-across-configs"
	
	local log cmd data
	local slsf="$tdir/source-lsf.log"
	local tlsf="$tdir/target-lsf.log"
	
	case $task in
	lsf)
		log="$tdir/$path-$task.log"
		local run=1
		case $path in
		source)
			local tfmt="+%Y/%m/%d %H:%M:%S"
			if [[ `check_file "$slsf"` == 0 ]] && [[ $(time_diff `date -r "$slsf" "$tfmt"` `date "$tfmt"`) -lt 30 ]]; then
				log="$slsf"
				run=0
			fi
		;;
		target)
			if [[ `check_file "$slsf" "$tlsf"` == 0 ]]; then
				sort -o "$slsf" "$slsf"
				sort -o "$tlsf" "$tlsf"
				if `cmp -s "$slsf" "$tlsf"`; then
					log="$tlsf"
					run=0
				fi
			fi
		;;
		esac
		if [[ $run == 1 ]]; then
			# cmd+=("$rclone lsf \"$path_ori\" -R --format psti --files-only $opt_cm | sort > \"$log\"") # detail lsf
			cmd+=("$rclone lsf \"$path_ori\" -R --files-only $opt_cm | sort > \"$log\"")
		fi
	;;
	lsf-count)
		log="$tdir/$path-lsf.log"
		if [[ `check_file "$log"` == 1 ]]; then
			clone $path lsf
		fi
	;;
	dupe)
		log="$tdir/$path-$task.log"
		data="$tdir/$path-lsf.log"
		if [[ `check_file "$data"` == 1 ]]; then
			clone $path lsf-count 0
		fi
		if [[ `check_file "$data"` == 0 ]]; then
			cmd+=("cat \"$data\" | uniq -d > \"$log\"")
		fi
	;;
	dupe-dir)
		log="$tdir/$path-$task.log"
		data="$tdir/$path-dupe.log"
		if [[ `check_file "$data"` == 1 ]]; then
			clone $path dupe 0
		fi
		if [[ `check_file "$data"` == 0 ]]; then
			cmd+=("cat \"$data\" | xargs dirname | uniq -u > \"$log\"")
		fi
	;;
	copy)
		log="$clog"
		data="$tdir/target-lsf.log"
		if [[ `check_file "$data"` == 1 ]]; then
			clone target lsf
		fi
		local exclude
		if [[ `check_file "$tlsf"` == 0 ]]; then
			#exclude=" --exclude-from \"$tlsf\""
			etmp="$temp/target-lsf-exclude.log"
			cat "$tlsf" | sed -e 's/\[/\\\[/g' -e 's/\]/\\\]/g' > "$etmp"
			exclude=" --exclude-from \"$etmp\""
		else
			exclude=""
		fi
		cmd+=("$gclone copy \"$source\" \"$target\"${exclude} $opt_sv $opt_cp")
	;;
	dedupe) # dedupe not support --include-from
		log="$tdir/$path-$task-dir.log"
		data="$tdir/$path-dupe-dir.log"
		if [[ `check_file "$data"` == 1 ]]; then
			clone $path dupe-dir 0
		fi
		if [[ `check_file "$data"` == 0 ]]; then
			for item in `cat "$data"`; do
				cmd+=("$gclone dedupe \"${path_ori}${item}\" --dedupe-mode newest --drive-use-trash=false --no-traverse $opt_cm")
			done
		fi
	;;
	old)
		log="$tdir/$path-$task.log"
		if [[ `check_file "$slsf"` == 1 ]]; then
			clone source lsf 0
		fi
		if [[ `check_file "$tlsf"` == 1 ]]; then
			clone target lsf 0
		fi
		if [[ `check_file "$slsf" "$tlsf"` == 0 ]]; then
			cmd+=("comm -13 <(sort \"$slsf\") <(sort \"$tlsf\") > \"$log\"")
		fi
	;;
	old-delete)
		log="$clog"
		data="$tdir/target-old.log"
		if [[ `check_file "$data"` == 1 ]]; then
			clone target old
		fi
		if [[ `check_file "$data"` == 0 ]]; then
			cmd+=("$rclone delete \"$path_ori\" --files-from \"$data\" --drive-use-trash=false $opt_cm")
		fi
	;;
	miss)
		log="$tdir/$path-$task.log"
		if [[ `check_file "$slsf"` == 1 ]]; then
			clone source lsf
		fi
		if [[ `check_file "$tlsf"` == 1 ]]; then
			clone target lsf
		fi
		if [[ `check_file "$slsf" "$tlsf"` == 0 ]]; then
			cmd+=("comm -13 <(sort \"$tlsf\") <(sort \"$slsf\") > \"$log\"")
		fi
	;;
	miss-copy)
		log="$clog"
		data="$tdir/$path-miss.log"
		if [[ `check_file "$data"` == 1 ]]; then
			clone target miss 0
		fi
		if [[ `check_file "$data"` == 0 ]]; then
			cmd+=("$gclone copy \"$source\" \"$target\" --files-from \"$data\" $opt_sv $opt_cp")
		fi
	;;
	rmdirs)
		log="$clog"
		cmd+=("$rclone rmdirs \"$path_ori\" --leave-root --drive-use-trash=false $opt_cm")
	;;
	rsize|gsize)
		log="$clog"
		local exec
		case $task in
		rsize) exec="$rclone";;
		gsize) exec="$gclone";;
		esac
		cmd+=("$exec size \"$path_ori\" --size-only $opt_cm > \"$log\"")
	;;
	esac
	
	mstr="old-delete"
	tmax=${#mstr}
	
	if [[ ${#cmd[@]} != 0 ]]; then
		local stime=`date +%s`
		for item in "${cmd[@]}"; do
			if [[ $logon != 0 ]]; then
				log_fmt w TASK "$path_str | `printf "%-${tmax}s" $task` | $item"
			fi
			eval "$item"
			if [[ $? != 0 ]]; then
				log_fmt r ERROR "$item"
			fi
		done
		local etime=`date +%s`
	fi
	
	local count
	if [[ -f "$log" ]]; then
		case $task in
			size|lsf) sed -i "/^gclone.*\?json$/d" "$log";; # clean
		esac
		case $task in
			copy|miss-copy|old-delete|rmdirs)
				local cstr
				case $task in 
					copy|miss-copy)
						cstr="Copied";;
					dedupe|old-delete)
						cstr="Deleted";;
					rmdirs)
						cstr="Removing directory";;
				esac
				clst=`cat "$log" | grep "$cstr"`
				count=`echo "$clst" | wc -l`
				echo "$clst" | tee -a "$tlog"
				case $task in 
					copy|miss-copy|rmdirs)
						echo "$clst" | cut -f 4 -d ':' | sed -e 's/^\s//g' -e 's/\s$//g' >> "$tlsf"
					;;
					dedupe|old-delete)
						IFS=$'\n'
						for item in $cstr; do
							sed -i "/$item/d" "$tlsf"
						done
						IFS=$oIFS
					;;
				esac
				sort -o "$tlsf" "$tlsf"
				log_fmt g INFO "$path_str | $cstr | $count | $tlsf"
			;;
			rsize|gsize)
				count=`sed -z 's/\n/ | /' "$log" | sed -e 's/^\s//g' -e 's/\s$//g' -e 's/\s\{1,\}/ /g'`
			;;
			*)
				sed -i '/^$/d' "$log"
				count=`cat "$log" | wc -l`
				if [[ $count == 0 ]]; then
					rm -f "$log"
				fi
			;;
		esac
	else
		count=0
	fi
	if [[ $logon != 0 ]]; then
		log_fmt g COUNT "$path_str | `printf "%-${tmax}s" $task` | $count | `runtime $stime $etime`"
		case $task in
			rsize|gsize)
				sed -i "1i$log_msg" "$cslog"
			;;
		esac
	fi
}

############################################################

title="Google Drive Server Side Clone"

tdir="$basedir/$tname"
temp="$tdir/temp"
make_dir "$tdir/temp"

tlog="$tdir/task.log"
clog="$tdir/clone.log"

calog="$tdir/count-all.log"
if [[ ! -f $calog ]]; then
	echo > "$calog"
fi
cslog="$tdir/count-size.log"
if [[ ! -f $cslog ]]; then
	echo > "$cslog"
fi

echo
log_fmt y START "========== ${title} =========="
log_fmt y INFO "args      | `echo $@`"
log_fmt y INFO "source    | $1"
log_fmt y INFO "target    | $2"
log_fmt y INFO "task name | $3"
log_fmt y INFO "command   | $4"

log_fmt w INFO "path | `printf "%-11s" task` | $tdir"
get_path

rclone="$rclone --config \"$rconf\""
gclone="$gclone --config \"$gconf\""

stime=`date +%s`

case $command in
#all)
#	clone source size
#	clone source lsf
#	clone source dupe
#
#	clone server copy
#	
#	clone target dedupe
#
#	clone target lsf
#
#	clone target old
#	clone target old-delete
#
#	clone target miss
#	clone server miss-copy
#
#	clone target rmdirs
#
#	clone target size
#	clone target lsf
#	clone target lsf-count
#	clone target dupe
#;;
all)
	clone server copy
	clone target dedupe
	
	clone source lsf
	clone target lsf
	clone source lsf-count
	clone target lsf-count
	clone source dupe
	clone target dupe
	clone source dupe-dir
	clone target dupe-dir
	
	clone target old
	clone target old-delete
	
	clone target miss
	clone server miss-copy
	
	#clone target rmdirs
	
	clone target lsf-count
	
	clone source rsize
	clone target rsize
	#clone source gsize
	#clone target gsize
;;
lsf)
	clone source $command
	clone target $command
	clone source lsf-count
	clone target lsf-count
	clone source dupe
	clone target dupe
	clone source dupe-dir
	clone target dupe-dir
;;
lsf-count)
	clone source $command
	clone target $command
	clone source dupe
	clone target dupe
	clone source dupe-dir
	clone target dupe-dir
;;
dupe)
	clone source $command
	clone target $command
	clone source dupe-dir
	clone target dupe-dir
;;
dupe-dir|rsize|gsize)
	clone source $command
	clone target $command
;;
copy|miss-copy)
	clone server $command
;;
dedupe|old|old-delete|miss|rmdirs)
	clone target $command
;;
*) usage; exit 1;;
esac

etime=`date +%s`
log_fmt y INFO "runtime | `runtime $stime $etime`"
log_fmt y END "========== ${title} =========="
echo
