#!/bin/bash

# 스크립트
# 실행   : ./gsa-gen
# 버전   : 2020.08.12-01
# 환경   : 리눅스 계열 bash
# 제작자 : 에레이
# 테스트 : windows 10 x64 wsl2 ubuntu 20.04 tls

# 특징
# 불필요한 Google APIs 제거
# 서비스 계정 및 키 파일을 일정한 규칙으로 생성
# 구글 그룹스에 서비스 계정 추가 시 복사/붙여넣기용 텍스트 파일 생성

# 참고
# Google 서비스 계정 : https://cloud.google.com/iam/docs/service-accounts?hl=ko
# Google Cloud SDK   : https://cloud.google.com/sdk/docs?hl=ko
# gcloud             : https://cloud.google.com/sdk/gcloud/reference?hl=ko
# sa-gen             : https://github.com/88lex/sa-gen

# 변수
PROJECT_START=2         # 프로젝트 시작 번호
PROJECT_END=2           # 프로젝트 종료 번호
PROJECT_INFIX=rclone    # 프로젝트 이름 접요사
NUM_SAS_PER_PROJECT=100 # 프로젝트 당 서비스 계정 수, 최대 100개
DIR_WORK=$(pwd)         # 기본 저장 경로
DIR_KEY=accounts        # 서비스 계정 키 저장 폴더

# 프로젝트 명 규칙 : 구글_ID-PROJECT_INFIX-프로젝트_번호 [ex] test-rclone-01

timestamp(){
	echo "[$(date '+%Y-%m-%d %H:%M:%S')]"
}

install_sdk() {
	if [[ $(which gcloud) == 0 ]]; then
		echo -e "$(timestamp) [INFO] Google Cloud SDK 설치"
		local tmp=/etc/apt/sources.list.d/google-cloud-sdk.list
		sudo rm -f ${tmp}
		echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a ${tmp}
		curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
		sudo apt-get update -y && sudo apt-get install google-cloud-sdk -y
	fi
}

auth_login() {
	if [[ $(gcloud auth list 2>&1) != *"Credentialed"* ]]; then
		echo -e "$(timestamp) [INFO] Google Cloud SDK 자격 증명"
		gcloud auth login
	fi
}

get_account() {
	local pattern="\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b"
	ACCOUNT=$(echo $(gcloud auth list 2>&1) | grep -Eo ${pattern})
	if [[ ${ACCOUNT} == "" ]]; then
		ACCOUNT=$(echo $(gcloud config list 2>&1) | grep -Eo ${pattern})
	fi
	if [[ ${ACCOUNT} != "" ]]; then
		ID=$(echo ${ACCOUNT} | grep -Eo "\b^[A-Za-z0-9._%+-]+\b" | sed "s/\./-/g")
		echo -e "$(timestamp) [INFO] Google APIs 계정 지정 : ${ACCOUNT}"
		gcloud config set account ${ACCOUNT} &>/dev/null
	else
		echo -e "$(timestamp) [ERROR] Google 계정 확인 필요 : ${ACCOUNT}"
		exit
	fi
}

create_projects() {
    PROJECT=${ID}-${PROJECT_INFIX}-${1:-}
	if [[ $(gcloud projects list 2>&1) != *"${PROJECT}"* ]]; then
		echo -e "$(timestamp) [INFO] 프로젝트 생성 : ${PROJECT}"
		gcloud projects create ${PROJECT} &>/dev/null
		local code=$?
		if [ ${code} == 0 ]; then
			echo -e "$(timestamp) [INFO] 프로젝트 목록"
			gcloud projects list
		else
			echo -e "$(timestamp) [ERROR] 프로젝트 생성 불가 : ${PROJECT}"
			case ${code} in
				1)
					echo -e "+ 프로젝트 ID 중복으로 변수 값 수정 필요"
					read -p "  PROJECT_INFIX=" PROJECT_INFIX
					create_projects
					return
					;;
				2)
					echo -e "+ 프로젝트 ID 규칙 오류\n  \
					https://cloud.google.com/sdk/gcloud/reference/projects/create?hl=ko#PROJECT"
					exit
					;;
				*)
					echo -e "+ 프로젝트 할당량 초과\n  \
					https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=ko#managing_project_quotas"
					exit
					;;	# 오류 코드 확인 필요
			esac
		fi
	fi
	sleep 0.5s
	echo -e "$(timestamp) [INFO] 프로젝트 지정 : ${PROJECT}"
	gcloud config set project ${PROJECT} &>/dev/null
}

enable_apis() {
	local e_apis=("drive.googleapis.com") # 필수 apis
	local d_apis=""                       # 불필요 apis
	local filter=""
	local tmp=""
	for api in ${e_apis[@]}; do
		tmp+="${api} "
		filter+="NOT config.name=${api} AND "
	done
	filter=${filter:0:-5}
	for api in $(gcloud services list --filter="${filter}" --format="table(NAME)" | sed 1d); do
		d_apis+="${api} "
	done
	e_apis=${tmp:0:-1}
	if [[ ${d_apis} != "" ]]; then
		echo -e "$(timestamp) [INFO] 불필요한 APIs 사용 중지"
		while read -r line; do
			echo -e "- ${line}"
		done <<< $(gcloud services list --filter="${filter}" --format="table(TITLE)" | sed 1d)
		gcloud services disable --force ${d_apis:0:-1} &>/dev/null
	fi
	echo -e "$(timestamp) [INFO] 필수 APIs 사용 : ${e_apis}"
	gcloud services enable ${e_apis} &>/dev/null
}

create_sas() {
	FILE_EMAIL="accounts-${PROJECT}.txt"
	local e_str=""
	local separator=",\n"
	touch "${DIR_WORK}/${FILE_EMAIL}"
	for num_s in $(seq -f "%03g" 1 ${NUM_SAS_PER_PROJECT}); do
		if [ ${num_s} == ${NUM_SAS_PER_PROJECT} ]; then
			separator=""
		fi
		local num_p=${1:-}
		local name="p-${num_p}-sa-${num_s}"
		local prefix=${name}@${PROJECT}
		local email=${prefix}.iam.gserviceaccount.com
		echo -en "$(timestamp) [INFO] 서비스 계정 생성 : ${num_s}/${NUM_SAS_PER_PROJECT}\r"
		gcloud iam service-accounts create ${name} &>/dev/null
		local code=$?
		if [[ ${code} == 0 || ${code} == 1 ]]; then
			if [ ${num_s} == ${NUM_SAS_PER_PROJECT} ]; then
				echo
			fi
			echo -en "$(timestamp) [INFO] 서비스 키   생성 : ${num_s}/${NUM_SAS_PER_PROJECT}\r"
			gcloud iam service-accounts keys create "${DIR_WORK}/${DIR_KEY}/${prefix}.json" --iam-account=${email} &>/dev/null
			if [[ ${e_str} != *"${email}"* ]]; then
				e_str+=${email}${separator}
			fi
			if [ ${num_s} == ${NUM_SAS_PER_PROJECT} ]; then
				echo
			fi
		fi
    done
	echo -e ${e_str} > "${FILE_EMAIL}"
}

check_sas() {
	sleep 1s
	local total_s=0	# service accounts count
	local total_k=0	# service accounts keys count
	local total_e=0	# service accounts email count
	for line in $(gcloud iam service-accounts list --format="table(EMAIL)" | sed 1d); do
		if [ ${line} != "" ]; then
			((total_s++))
		fi
	done
	if [ -d "${DIR_WORK}/${DIR_KEY}/" ]; then
		total_k=$(ls -alR "${DIR_WORK}/${DIR_KEY}/" | grep -c ^-)
	fi
	for line in $(cat "${FILE_EMAIL}"); do
		if [ ${line} != "" ]; then
			((total_e++))
		fi
	done
	echo -e "$(timestamp) [INFO] 서비스 계정   : ${total_s}개"
	echo -e "$(timestamp) [INFO] 서비스 키     : ${total_k}개, 경로 : ${DIR_WORK}/${DIR_KEY}/"
	echo -e "$(timestamp) [INFO] 서비스 이메일 : ${total_e}개, 경로 : ${DIR_WORK}/${FILE_EMAIL}"
}

unset() {
	if [[ ${ACCOUNT} != "" ]]; then
		echo -e "$(timestamp) [INFO] Google APIs 계정 지정 해제 : ${ACCOUNT}"
		gcloud config unset account &>/dev/null
		echo -e "$(timestamp) [INFO] 프로젝트 지정 해제 : ${PROJECT}"
		gcloud config unset project &>/dev/null
	fi
	if [ -f "${DIR_WORK}/${FILE_EMAIL}" ]; then
		read -p "$(timestamp) [NOTICE] 서비스 계정 이메일 확인 (y/n)? " answer
		case ${answer:0:1} in
			y|Y)
				cat "${DIR_WORK}/${FILE_EMAIL}"
			;;
		esac
	fi
}

main() {
	install_sdk
	auth_login
	get_account
	for function in create_projects enable_apis create_sas; do
		for PROJECT_NUM in $(seq -f "%02g" ${PROJECT_START} ${PROJECT_END}); do
			eval ${function} "${PROJECT_NUM}"
		done
	done
	check_sas
	unset
}

main
