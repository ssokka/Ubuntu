#!/bin/bash
# 인코딩 : ubuntu utf-8 lf
# GitHub : https://github.com/ssokka/Ubuntu/blob/master/gsa-gen

# 스크립트
# 설명      : 구글 서비스 계정 생성기
# 실행 환경 : 리눅스 Bash
# 개발 환경 : windows 10 x64 wsl2 ubuntu 20.04 tls
# 한줄 실행 : curl https://raw.githubusercontent.com/ssokka/ubuntu/master/gsa-gen | bash -
# 일반 실행 : bash gsa-gen
# 다운로드  : curl -O https://raw.githubusercontent.com/ssokka/ubuntu/master/gsa-gen

# 특징
# 불필요한 Google APIs 제거
# 서비스 계정 및 키 파일을 일정한 규칙으로 생성
# 구글 그룹스에 서비스 계정 추가 시 복사/붙여넣기용 텍스트 파일 생성

# 참고
# 프로젝트 명 규칙  : 구글_ID-PROJECT_INFIX-프로젝트_번호 [ex] test-rclone-01
# 구글 서비스 계정  : https://cloud.google.com/iam/docs/service-accounts?hl=ko
# 구글 클라우드 SDK : https://cloud.google.com/sdk/docs?hl=ko
# gcloud            : https://cloud.google.com/sdk/gcloud/reference?hl=ko
# sa-gen            : https://github.com/88lex/sa-gen

# 변수
# PROJECT_EXIST 변수를 지정할 경우
# 3가지 변수(PROJECT_START, PROJECT_END, PROJECT_INFIX)는 무시된다.
PROJECT_EXIST=""        # 기존 프로젝트 이름
PROJECT_START=1         # 프로젝트 시작 번호
PROJECT_END=1           # 프로젝트 종료 번호
PROJECT_INFIX=rclone    # 프로젝트 이름 접요사
NUM_SAS_PER_PROJECT=100 # 프로젝트 당 서비스 계정 생성 갯수, 최대 100개
DIR_WORK=$(pwd)         # 기본 저장 경로
DIR_KEY=accounts        # 서비스 계정 키 저장 폴더

echo

if [ -n "${PROJECT_EXIST}" ]; then
	PROJECT_START=1
	PROJECT_END=1
fi

timestamp(){
	echo "[$(date '+%Y-%m-%d %H:%M:%S')]"
}

install_sdk() {
	if [[ $(which gcloud) == 0 ]]; then
		echo -e "$(timestamp) [INFO] 구글 클라우드 SDK 설치"
		local tmp=/etc/apt/sources.list.d/google-cloud-sdk.list
		sudo rm -f "${tmp}"
		echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a "${tmp}"
		curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
		sudo apt-get update -y && sudo apt-get install google-cloud-sdk -y
		echo
	fi
}

auth_login() {
	if [[ $(gcloud auth list 2>&1) != *"Credentialed"* ]]; then
		echo -e "$(timestamp) [INFO] 구글 클라우드 SDK 자격 증명"
		gcloud auth login
		echo
	fi
}

get_account() {
	local pattern="\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}\b"
	ACCOUNT=$(echo $(gcloud auth list 2>&1) | grep -Eo ${pattern})
	if [[ "${ACCOUNT}" == "" ]]; then
		ACCOUNT=$(echo $(gcloud config list 2>&1) | grep -Eo ${pattern})
	fi
	if [[ "${ACCOUNT}" != "" ]]; then
		ID=$(echo ${ACCOUNT} | grep -Eo "\b^[A-Za-z0-9._%+-]+\b" | sed "s/\./-/g")
		echo -e "$(timestamp) [INFO] 구글 계정 지정 : ${ACCOUNT}"
		gcloud config set account ${ACCOUNT} &>/dev/null
	else
		echo -e "$(timestamp) [ERROR] 구글 계정 확인 필요 : ${ACCOUNT}"
		exit
	fi
}

create_projects() {
	if [ -z "${PROJECT_EXIST}" ]; then
		PROJECT=${ID}-${PROJECT_INFIX}-${1:-}
	else
		PROJECT=${PROJECT_EXIST}
	fi
	if [[ $(gcloud projects list 2>&1) != *"${PROJECT}"* ]]; then
		echo -e "$(timestamp) [INFO] 프로젝트 생성  : ${PROJECT}"
		gcloud projects create ${PROJECT} &>/dev/null
		local code=$?
		if [ ${code} == 0 ]; then
			echo -e "$(timestamp) [INFO] 프로젝트 목록"
			gcloud projects list
		else
			echo -e "$(timestamp) [ERROR] 프로젝트 생성 불가 : ${PROJECT}"
			case ${code} in
				1)
					echo -e "+ 프로젝트 ID 중복으로 변수 값 수정 필요"
					read -p "  PROJECT_INFIX=" PROJECT_INFIX
					create_projects
					return
					;;
				2)
					echo -e "+ 프로젝트 ID 규칙 오류\n  \
					https://cloud.google.com/sdk/gcloud/reference/projects/create?hl=ko#PROJECT"
					exit
					;;
				*)
					echo -e "+ 프로젝트 할당량 초과\n  \
					https://cloud.google.com/resource-manager/docs/creating-managing-projects?hl=ko#managing_project_quotas"
					exit
					;; # 오류 코드 확인 필요
			esac
		fi
		sleep 0.25s
	fi
	echo -e "$(timestamp) [INFO] 프로젝트 지정  : ${PROJECT}"
	gcloud config set project ${PROJECT} &>/dev/null
}

enable_apis() {
	local e_apis=("drive.googleapis.com") # 필수 apis
	local d_apis="" # 불필요 apis
	local filter=""
	local tmp=""
	for api in ${e_apis[@]}; do
		tmp+="${api} "
		filter+="NOT config.name=${api} AND "
	done
	filter=${filter:0:-5}
	for api in $(gcloud services list --filter="${filter}" --format="table(NAME)" | sed 1d); do
		d_apis+="${api} "
	done
	e_apis=${tmp:0:-1}
	if [[ "${d_apis}" != "" ]]; then
		echo -e "$(timestamp) [INFO] 불필요한 APIs 사용 중지"
		while read -r line; do
			echo -e "- ${line}"
		done <<< $(gcloud services list --filter="${filter}" --format="table(TITLE)" | sed 1d)
		gcloud services disable --force ${d_apis:0:-1} &>/dev/null
	fi
	echo -e "$(timestamp) [INFO] 필수 APIs 사용 : ${e_apis}"
	gcloud services enable ${e_apis} &>/dev/null
}

create_sas() {
	# 2020.08.12
	# 서비스 계정 키를 다시 다운로드할 방법이 없다.
	# 서비스 계정 키의 중복을 회피 하는 방법은 서비스 계정을 모두 삭제한 후 다시 생성해야 한다.
	local list=$(gcloud iam service-accounts list --format="table(EMAIL)" | sed 1d)
	local total=$(echo "${list}" | wc -l)
	if [ -n "${list}" ]; then
		echo
		local count=1
		for email in ${list}; do
			echo -en "$(timestamp) [INFO] 기존 서비스 계정 삭제 (키 다중 생성 방지) : $(printf "%03d" ${count})/$(printf "%03d" ${total})\r"
			gcloud iam service-accounts delete ${email} --quiet &>/dev/null
			((count++))
		done
		echo
	fi
	echo
	local tes="" # total email string
	local ess=",\n" # email string separator
	FILE_EMAIL="accounts-${PROJECT}.txt"
	touch "${DIR_WORK}/${FILE_EMAIL}"
	echo -e "$(timestamp) [INFO] 생성"
	for num_s in $(seq -f "%03g" 1 ${NUM_SAS_PER_PROJECT}); do
		# num_s = service account number
		if [ ${num_s} == ${NUM_SAS_PER_PROJECT} ]; then
			ess=""
		fi
		local num_p=${1:-} # project number
		local name="p-${num_p}-sa-${num_s}"
		local prefix=${name}@${PROJECT}
		local email=${prefix}.iam.gserviceaccount.com
		echo -en "$(timestamp) [INFO]   + 서비스 계정 : ${num_s}/${NUM_SAS_PER_PROJECT}\r"
		gcloud iam service-accounts create ${name} &>/dev/null
		if [ ${num_s} == ${NUM_SAS_PER_PROJECT} ]; then
			echo
		fi
		sleep 0.25s
		echo -en "$(timestamp) [INFO]   + 서비스 키   : ${num_s}/${NUM_SAS_PER_PROJECT}\r"
		gcloud iam service-accounts keys create "${DIR_WORK}/${DIR_KEY}/${prefix}.json" --iam-account=${email} &>/dev/null
		if [ ${num_s} == ${NUM_SAS_PER_PROJECT} ]; then
			echo
		fi
		sleep 0.25s
		echo -en "$(timestamp) [INFO]   + 이메일 정보 : ${num_s}/${NUM_SAS_PER_PROJECT}\r"
		if [[ ${tes} != *"${email}"* ]]; then
			tes+=${email}${ess}
		fi
		if [ ${num_s} == ${NUM_SAS_PER_PROJECT} ]; then
			echo
		fi
    done
	echo -e ${tes} > "${FILE_EMAIL}"
}

count_sas() {
	sleep 0.25s
	local tcs=0 # service accounts count
	local tck=0 # service accounts keys count
	local tce=0 # service accounts email count
	for line in $(gcloud iam service-accounts list --format="table(EMAIL)" | sed 1d); do
		if [ "${line}" != "" ]; then
			((tcs++))
		fi
	done
	if [ -d "${DIR_WORK}/${DIR_KEY}/" ]; then
		tck=$(ls -al "${DIR_WORK}/${DIR_KEY}" | grep '.*@\.${PROJECT}.*' | grep '^-' | awk '{print $9}' | wc -l)
	fi
	for line in $(cat "${FILE_EMAIL}"); do
		if [ ${line} != "" ]; then
			((tce++))
		fi
	done
	echo
	echo -e "$(timestamp) [INFO] 확인"
	echo -e "$(timestamp) [INFO]   + 서비스 계정   : ${tcs}개"
	echo -e "$(timestamp) [INFO]   + 서비스 키     : ${tck}개, 폴더 경로 : ${DIR_WORK}/${DIR_KEY}/"
	echo -e "$(timestamp) [INFO]   + 서비스 이메일 : ${tce}개, 파일 경로 : ${DIR_WORK}/${FILE_EMAIL}"
}

exit() {
	if [[ "${ACCOUNT}" != "" ]]; then
		echo
		echo -e "$(timestamp) [INFO] 구글 계정 지정 해제 : ${ACCOUNT}"
		gcloud config unset account &>/dev/null
		echo -e "$(timestamp) [INFO] 프로젝트 지정 해제  : ${PROJECT}"
		gcloud config unset project &>/dev/null
	fi
	if [ -f "${DIR_WORK}/${FILE_EMAIL}" ]; then
		echo
		read -p "$(timestamp) [NOTICE] 서비스 계정 이메일 확인 (y/n)? " answer
		case ${answer:0:1} in
			y|Y)
				cat "${DIR_WORK}/${FILE_EMAIL}"
			;;
		esac
	fi
}

main() {
	install_sdk
	auth_login
	get_account
	for function in create_projects enable_apis create_sas; do
		for PROJECT_NUM in $(seq -f "%02g" ${PROJECT_START} ${PROJECT_END}); do
			eval ${function} "${PROJECT_NUM}"
		done
	done
	count_sas
	exit
}

main
